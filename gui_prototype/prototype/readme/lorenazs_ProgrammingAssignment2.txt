b'### Introduction\n\nThis second programming assignment will require you to write an R\nfunction that is able to cache potentially time-consuming computations.\nFor example, taking the mean of a numeric vector is typically a fast\noperation. However, for a very long vector, it may take too long to\ncompute the mean, especially if it has to be computed repeatedly (e.g.\nin a loop). If the contents of a vector are not changing, it may make\nsense to cache the value of the mean so that when we need it again, it\ncan be looked up in the cache rather than recomputed. In this\nProgramming Assignment you will take advantage of the scoping rules of\nthe R language and how they can be manipulated to preserve state inside\nof an R object.\n\n### Example: Caching the Mean of a Vector\n\nIn this example we introduce the `<<-` operator which can be used to\nassign a value to an object in an environment that is different from the\ncurrent environment. Below are two functions that are used to create a\nspecial object that stores a numeric vector and caches its mean.\n\nThe first function, `makeVector` creates a special "vector", which is\nreally a list containing a function to\n\n1.  set the value of the vector\n2.  get the value of the vector\n3.  set the value of the mean\n4.  get the value of the mean\n\n<!-- -->\n\n    makeVector <- function(x = numeric()) {\n            m <- NULL\n            set <- function(y) {\n                    x <<- y\n                    m <<- NULL\n            }\n            get <- function() x\n            setmean <- function(mean) m <<- mean\n            getmean <- function() m\n            list(set = set, get = get,\n                 setmean = setmean,\n                 getmean = getmean)\n    }\n\nThe following function calculates the mean of the special "vector"\ncreated with the above function. However, it first checks to see if the\nmean has already been calculated. If so, it `get`s the mean from the\ncache and skips the computation. Otherwise, it calculates the mean of\nthe data and sets the value of the mean in the cache via the `setmean`\nfunction.\n\n    cachemean <- function(x, ...) {\n            m <- x$getmean()\n            if(!is.null(m)) {\n                    message("getting cached data")\n                    return(m)\n            }\n            data <- x$get()\n            m <- mean(data, ...)\n            x$setmean(m)\n            m\n    }\n\n### Assignment: Caching the Inverse of a Matrix\n\nMatrix inversion is usually a costly computation and there may be some\nbenefit to caching the inverse of a matrix rather than computing it\nrepeatedly (there are also alternatives to matrix inversion that we will\nnot discuss here). Your assignment is to write a pair of functions that\ncache the inverse of a matrix.\n\nWrite the following functions:\n\n1.  `makeCacheMatrix`: This function creates a special "matrix" object\n    that can cache its inverse.\n2.  `cacheSolve`: This function computes the inverse of the special\n    "matrix" returned by `makeCacheMatrix` above. If the inverse has\n    already been calculated (and the matrix has not changed), then\n    `cacheSolve` should retrieve the inverse from the cache.\n\nComputing the inverse of a square matrix can be done with the `solve`\nfunction in R. For example, if `X` is a square invertible matrix, then\n`solve(X)` returns its inverse.\n\nFor this assignment, assume that the matrix supplied is always\ninvertible.\n\nIn order to complete this assignment, you must do the following:\n\n1.  Fork the GitHub repository containing the stub R files at\n    [https://github.com/rdpeng/ProgrammingAssignment2](https://github.com/rdpeng/ProgrammingAssignment2)\n    to create a copy under your own account.\n2.  Clone your forked GitHub repository to your computer so that you can\n    edit the files locally on your own machine.\n3.  Edit the R file contained in the git repository and place your\n    solution in that file (please do not rename the file).\n4.  Commit your completed R file into YOUR git repository and push your\n    git branch to the GitHub repository under your account.\n5.  Submit to Coursera the URL to your GitHub repository that contains\n    the completed R code for the assignment.\n\n### Grading\n\nThis assignment will be graded via peer assessment.\n'