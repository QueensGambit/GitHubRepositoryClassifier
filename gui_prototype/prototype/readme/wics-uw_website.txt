b'# The code that runs the WiCS site #\n\nThe site is generates static content from Markdown articles, using software\ncalled [Pelican](http://docs.getpelican.com/en/3.5.0/).\n\nThese docs are aimed at a Debian-based Linux user.\n\n## Contents: ##\n\n[Installation](#installation)\n\n[Setup](#setup)\n\n[Contributing content to the website](#contributing-content-to-the-website)\n\n[Development](#development)\n\n[Heroku Review Apps](#heroku-review-apps)\n\n[Deployment](#deployment)\n\n## Installation ##\n\n### `git` ###\n\n`git` is the source control that we use to manage changes to the website. It\ncomes preinstalled on most Linux systems. If you don\'t already have it, just\nrun\n\n```\nsudo apt-get install git-core\n```\n\nFor more information about what a typical `git` workflow for contributing to\nthe site might look like, check out [the curriculum from the WiCS git\nworkshop](https://github.com/wics-uw/git-workshop-W16/wiki) and [this OpenHatch\ndocument](http://openhatch.readthedocs.org/en/latest/advanced/working_with_git.html).\nYou can also look into completing the [OpenHatch `git` training\nmission](http://openhatch.org/missions/git).\n\n### `pelican` ###\n\nThe easiest way to install Pelican is to create a `virtualenv`. To do so,\nfirst ensure that `virtualenv` is installed:\n\n```\nsudo apt-get install python-virtualenv\n```\n\nNow you can create a `virtualenv`:\n\n```\nmkdir -p ~/virtualenvs/pelican\ncd ~/virtualenvs/pelican\nvirtualenv .\nsource bin/activate\n```\n\nYour shell prompt will change slightly, like this:\n\n```\nuser@honk ~/virtualenvs/pelican $ source bin/activate\n(pelican)user@honk ~/virtualenvs/pelican $\n```\n\nNow you can install Pelican by typing\n\n```\npip install pelican markdown\n```\n\nIf you ever need to re-enable the `virtualenv`, simply run\n\n```\nsource ~/virtualenvs/pelican/bin/activate\n```\n\n## Setup ##\n\nBefore you get started with development, we\'re going to walk through some setup\nsteps.\n\n### Cloning your repository ###\n\nOnly complete this step once!\n\nYou\'ll need to fork a copy of this repo in order to contribute. To do so, click\nthe "Fork" button in the upper right hand corner.\n\nOne the project is forked, you\'ll be taken to your very own local copy of the\nWiCS website, perhaps at `https://github.com/<your-username>/website`. This is\nyour personal remote repository on GitHub, or what we\'ll call `origin`.\n\nNext, you\'ll need a folder to store the code in. On Linux, use the command line\nto create a new directory and navigate there (`mkdir /path/to/code` and `cd\n/path/to/code`). On Windows, you can make a folder in Windows Explorer, and\nsince you have git installed, right click and select "Open Git Bash Here" to\nlaunch a terminal.\n\nNow you can clone your code:\n\n```\ngit clone https://github.com/<your-username>/website.git\n```\n\nwhich will create a folder called `website`. This is your git repository! In\nboth git bash or your Linux terminal, `cd website`.\n\nNow we need to add a reference to our upstream remote repository:\n\n```\ngit remote add upstream https://github.com/wics-uw/website.git\n```\n\n## Contributing content to the website ##\n\n### Creating a feature branch ###\n\nIn git, when we are working on a feature, we usually split it off from the\nmaster branch and refer to this branch as a "feature branch" or "topic branch."\n\nIf you\'re ready to work on a topic branch, follow these easy steps. First,\nensure your master branch is up to date:\n\n```\ngit checkout master         # Check out your master branch\ngit fetch upstream          # Fetch any new upstream code\ngit rebase upstream/master  # Rebase your master branch to match upstream\ngit push origin master      # Update your remote `origin` repository\n```\n\nNow you can make a new topic branch off master:\n\n```\ngit checkout -b topic-name  # Equivalent to git branch topic-name then checkout\n```\n\n### Commit structure ###\n\nHere are some tips for structuring your commits. These are generally considered\nbest practices.\n\n+ Use present-tense, imperative commit messages.\n  + **DON\'T** write "This fixes issue #234 by optimizing the algorithm"\n  + **DO** write "Optimizes algorithm; fixes #234"\n+ Write descriptive commit messages that give the reviewer the big picture\n  + **DON\'T** write "Updates in css files"; this is redundant and can be\n    determined by viewing the files the patch modifies\n  + **DO** feel free to write multi-line commit messages; keep in mind that\n    while only the first line is visible in summary view, additional comments\n    below go into the git log and can be very useful\n+ Separate commits in the smallest logical, reversible steps possible.\n  + **DON\'T** submit multiple small commits fixing typos; rebase these into a\n    single commit\n  + **DO** include whitespace updates in a separate commit from code changes,\n    template changes separate from adding content, etc.\n+ Ask for help if you\'re not sure how to do some of these things!\n\nRemember: code reviews will help catch these things and give you a better idea\nof what\'s considered standard. Don\'t fear constructive feedback!\n\n### Seeing what your change looks like ###\n\nBefore submitting a pull request, you can test your change locally to see what\nit will look like on the website. If you don\'t want to [test\nlocally](#testing-locally) or are having trouble setting it up, you can also\njust submit a pull request and wait for someone to deploy a [Heroku Review\nApp](#heroku-review-apps)\n\n### Submitting pull requests ###\n\nAfter you\'ve made your modifications on your topic branch, perhaps following\nthe guide in the **Development** section, you can now ask for your code to be\nmerged by submitting a pull request.\n\nTo do so, first push your code to your personal remote, `origin`:\n\n```\ngit push origin topic-name\n```\n\nThen log onto GitHub. You\'ll find a big green button asking if you want to\nsubmit a pull request. Click it and follow the steps to submit your pull\nrequest.\n\nOnce it\'s merged, you can click the "Delete branch" button on GitHub. In your\nlocal repository, the branch can be deleted with the\n\n```\ngit branch -d topic-name\n```\n\ncommand.\n\n### Reviewing a pull request ###\n\nThere are three views for reviewing a pull request on GitHub: **Conversation**,\n**Commits**, and **Files changed**.\n\n**Conversation**\n\n- Comments on the pull request show up here, including any inline comments that\n  are added when viewing the file diffs. A summary of submitted commits is also\n  listed.\n- Use this section to submit general feedback about the pull request.\n\n**Commits**\n\n- A more detailed list of commits included in the pull request, that will allow\n  a reviewer to view each individually.\n- Usually before merging, you\'ll want all the commits from that change to be\n  squashed into a single commit. Some of the reasons for this is so that the\n  commit can show the whole change that was made, and so that there aren\'t a\n  bunch of typo fixes in the repository\'s commit history!\n\n**Files changed**\n\n- The `diff` view of the pull request. Lets the reviewer see the full patch in\n  its entirety, and add inline comments on changes.\n- Use this section to submit line-specific feedback.\n\n#### Giving feedback ####\n\nEveryone is invited to give feedback regardless of experience. Comments can\ntouch on:\n\n- phrasing of any text added (typos, awkward phrasing, using gendered language\n  where it could be gender neutral)\n- tags on event posts (do they make sense? are they existing tags?)\n- lines that are over 80 characters long (which we avoid except for certain\n  cases like the metadata at the top of many of the files)\n- any identation that\'s hard to read \n- the way the change looks on the [Heroku Review App](#heroku-review-apps)\n- if there are multiple commmits that can be [squashed into one\n  commit](#squashing-commits)\n- linking to the site with a [static urls instead of relative \n  urls](https://github.com/wics-uw/website/issues/222) (which generally [is bad\n  practice](http://stackoverflow.com/questions/2005079/))\n\nYou can even look at it and decide it looks good and just comment with \xe2\x80\x9clooks\ngood to me!\xe2\x80\x9d \n\n\n### Squashing commits ###\n\nIf you have `x` commits you want to squash into one, run\n\n```git rebase -i HEAD~x```\n\n- you\'ll see a list of the last `x` commits.\n- keep the first one as `pick`\n- choose `fixup` (or you can just type `f`) for the rest of the commits\n- save and close, and there should just be one commit there! (to confirm, you\n  can run `git log`)\n\nWhen you push the new squashed commit, `git` will be confused and think you\'re\nmissing those `x` commits (when really you just turned them all into a new\nsingle commit). You might see the error message failed to push some refs to\n`https://github.com/<some-path>` and a suggestion to run `git pull`. **Do not\never run `git pull`**. It will bring back in a copy of all the commits you\nsquashed and potentially other commits unrelated to your change. Instead run\n`git push --force`.\n\n### Pulling in changes ###\n\nMaybe while you were working on your change, someone else contributed updates\nto the repository and you want add them to your branch. **Do not ever run `git\npull`**. Instead run:\n\n```\ngit fetch upstream\ngit rebase upstream/master\ngit push -f origin HEAD\n```\n\nIf you can\'t fetch from upstream, you might have to add a reference to our\nupstream remote repo:\n\n```\ngit remote add upstream https://github.com/wics-uw/website.git\n```\n\n### Merging ###\n\nA back-and-forth revision process will occur during the course of the review.\nFor the developer to update the pull request, they simply need to push new\nchanges to the topic branch being considered (sometimes using a force-push if\nthey need to rewrite commits).\n\nWhen all parties are happy with the patch, the reviewer can then sign off and\nmerge the code by clicking the big green "Merge" button. This code is then\nmerged into the upstream master branch. For the changes to appear on the\nwebsite, someone needs to deploy the new code (see the **Deployment** section\nfor more details).\n\n## Development ##\n\nYou can either add content to the site or modify its theme.\n\n### Adding site content ###\n\nAll site content is contained in the `content/` directory. Posts are sorted by\nterm directories, e.g. "F2014". There is also a `pages/` directory that\ncontains non-post type pages, such as contact info, about us, etc.\n\n#### Posts ####\n\nWe currently use three posting categories: **Blog**, **Events**, and **Media**.\n\n+ Use the **Media** category for video recordings of talks and events.\n+ Use the **Events** category to advertise event details.\n+ Use the **Blog** category for everything else: news, essays, etc.\n\nYou can also tag posts! Try to use tags that have already been used on the\nother posts, but feel free to add new tags as necessary.\n\nPlease try to use a consistent naming scheme. Articles are named by term,\ncategory, and slug; for instance, posting a video of a talk about automata in\nS13 might be named `S13-media-automata.md`.\n\n#### Pages ####\n\nWe only need a limited number of pages. You probably won\'t need to add many\nmore. These include things like our Code of Conduct, contact info, etc.\n\nIt might be useful to add a page that doesn\'t show up in the site navigation.\nTo do so, make sure you set `Status: hidden` in the Markdown preamble. This\nwill cause the page to be generated without showing up in the site\'s main\nnavigation.\n\n### Markup beautification ###\n\nThe theme we are currently using is called `notmyidea`. Pelican uses the\n[jinja2](http://jinja.pocoo.org/docs/dev/) templating system; if you\'ve used\nDjango, you\'ll find the templates very similar.\n\nTo modify the theme css or html, simply take a look at the theme data under\n`theme/notmyidea/` and modify it at will.\n\n### Testing Locally ###\n\nTo test a local copy of the site, you\'ll need to start the development server.\nThere\'s no additional software you need to install to launch a local version of\nthe site! Simply run\n\n```\n./develop_server.sh start\n```\n\nin the top directory, which will launch the development server on port 8000.\nThen you can navigate to the local site by visiting http://localhost:8000 in\nyour browser. This script will conveniently regenerate the site every time you\nmake a change to a file, so you won\'t need to rerun this command.\n\nTo shut down the development server, use\n\n```\n./develop_server stop\n```\n\n## Heroku Review Apps ##\n\nWhen prompted, Heroku will provision temporary public web hosting and a domain\nname for any open pull request, and post a pingback on GitHub. This allows\nanyone to access the temporary site and review what our website would look\nlike upon merging the changes from that pull request.\n\n### Permissions to access Heroku\n\nAccess to Heroku is granted to all committers in the wics-uw GitHub\norganization. Membership to the "committers" group is granted to all full\nSystems Committee members, as well as individuals that the Systems Committee\nhave chosen in recognition of their contributions and demonstrated\nresponsibility and good judgment.\n\nTo become a committer, you\'ll need to learn git, contribute regularly to the\nWiCS website (both opening pull requests and reviewing them), and then ask the\nSystems Committee for access, by emailing <wics-sys@lists.uwaterloo.ca>.\n\n### To deploy a pull request\n\n1. Go to [https://dashboard.heroku.com/apps](https://dashboard.heroku.com/apps)\n2. Click on *wics-site*\n3. In the left column, named *Review Apps*, find the PR you want to deploy and\n   click the button that says *Create Review App*\n\n## Deployment ##\n\nWe are currently using the [Computer Science\nClub](https://csclub.uwaterloo.ca)\'s ["club\nhosting"](http://wiki.csclub.uwaterloo.ca/Club_Hosting) as our webhost. You\nmust have a CSC login in the `wics` group to complete the next steps.\n\nTo deploy the site, first log into the CSC\'s webserver:\n\n```\nssh userid@csclub.uwaterloo.ca\n```\n\nThen use `become_club` to switch to the WiCS user account:\n\n```\nbecome_club wics\n```\n\nPull the latest version of the site from GitHub:\n\n```\ncd ~/pelican\ngit pull\n```\n\nThen build and deploy the site:\n\n```\nsource ~/virtualenvs/pelican/bin/activate\nmake rsync_upload\n```\n\nWhich conveniently deploys the site into the `wics` user\'s `www/` directory.\n'