b'OpenGL\r\n======\r\n\r\nOpenGL 3 and OpenGL 4 with GLSL\r\n\r\nPlease read [GLUS/README.txt](https://github.com/McNopper/OpenGL/blob/master/GLUS/README.txt)\r\n\r\nPlease read [Binaries/README.txt](https://github.com/McNopper/OpenGL/blob/master/Binaries/README.txt)\r\n\r\n======\r\n\r\nExample01 - Basic window and OpenGL 3 initialization\r\n\t\r\nExample02 - Rendering of a triangle\r\n\r\nExample03 - Grey filter\r\n\t\r\nExample04 - Perspective rendering of a cube\r\n\r\nExample05 - Phong rendering of a sphere\r\n\t\r\nExample06 - Texturing of a cube\r\n\r\nExample07 - Normal mapping\r\n\r\nExample08 - Environment/cube mapping\r\n\r\nExample09 - GPU Particles\r\n\r\nExample10 - Geometry shader\r\n\t\r\nExample11 - Reflection and refraction\r\n\r\nExample12 - Shadow mapping\r\n\r\nExample13 - Simple tessellation (OpenGL 4.1)\r\n\r\nExample14 - Terrain rendering (OpenGL 4.1)\r\n\r\nExample15 - Water rendering\r\n\r\nExample16 - Model loading and rendering\r\n\r\nExample17 - Clipping planes and two sided rendering\r\n\r\nExample18 - Using stencil buffer and clipping planes\r\n\r\nExample19 - Render to texture and planar reflection\r\n\r\nExample20 - Texture matrix, alpha blending and discarding\r\n\r\nExample21 - Compute shader (OpenGL 4.3)\r\n\r\nExample22 - Shadow volumes\r\n\r\nExample23 - Displacement mapping (OpenGL 4.1, AMD hardware - not on Mac OS X - has artifacts but used to work)\r\n\r\nExample24 - Erode effect using perlin noise\r\n\r\nExample25 - Model with groups and materials\r\n\r\nExample26 - Fur rendering\r\n\r\nExample27 - Projection shadow for directional light\r\n\r\nExample28 - Screen space ambient occlusion (SSAO) (OpenGL 4.1)\r\n\r\nExample29 - CPU ray tracing\r\n\r\nExample30 - GPU ray tracing using compute shader (OpenGL 4.3)\r\n\r\nExample31 - Many lights using deferred shading (OpenGL 4.1)\r\n\r\nExample32 - BRDF and IBL rendering (OpenGL 4.1)\r\n\r\nExample33 - Real-Time BRDF and IBL rendering (OpenGL 4.1)\r\n\r\nExample34 - Subsurface scattering\r\n\r\nExample35 - Order independent transparency using depth peeling\r\n\r\nExample36 - Order independent transparency using linked list (OpenGL 4.4, AMD hardware has artifacts)\r\n\r\nExample37 - CPU ray marching\r\n\r\nExample38 - Basic usage of program pipeline and separable programs(OpenGL 4.1)\r\n\r\nExample39 - Basic usage of program pipeline, separable programs and shader subroutines (OpenGL 4.1, AMD hardware does not work properly)\r\n\r\nExample40 - Cloth simulation using compute shader (OpenGL 4.3)\r\n\r\nExample41 - Ocean wave height/normal map calculation with FFT using compute shader (OpenGL 4.3, NVIDIA hardware under Linux has artifacts)\r\n\r\nExample42 - FXAA (OpenGL 4.3)\r\n\r\nExample43 - Scene with several models having groups and materials\r\n\r\nExample44 - Conservative rasterization\r\n\r\nExample45 - GPU voxelization (OpenGL 4.4)\r\n'