b"# Pirate Party Australia Official Documents\n\n## Constitution\n\n### Generate as PDF\n\nTo compile the Constitution, you need to have installed a `xelatex` compiler, which comes with TeX Live and other package sets.\n\nThen run: `xelatex constitution.tex` twice and open the resulting PDF file.\n\n### Generate as HTML\n\nRequires Python 3, with `lxml` and `roman` packages (see below).\n\nRun: `python3 convert_tex_to_html.py > file.html` and open the resulting HTML file.\n\n## convert_tex_to_html.py\n\nScript options:\n\n- `-F`, `--final` - removes draft markings.\n- `-d yyyy-mm-dd`, `--date` - changes the default date (today) to whatever is specified.\n- `-f document.tex`, `--file` - changes the default input TeX file (constitution.tex) to whatever is specified.\n- `-T Title\\ Goes\\ Here`, `--title` - defines the title (if empty, prints blank).\n- `-P`, `--parts` - used for documents with parts (numbered with Roman numerals).\n- `-toc`, `--toc` - adds a table of contents using the highest heading level in the document.\n\nExample: `python3 convert_tex_to_html.py > output.html -f input.tex -T Title -P`\n\nThis will make output.html from input.tex, the contents will be titled 'Title', and it will have part numbering.\n\nThe input TeX file can be very basic and does not need a preamble:\n\n```\n\\part{Part i}\n\n\\section{Section 1}\n\n\\begin{enumerate}\n  \\item Item (1)\n  \\item Item (2)\n  \\item Item (3)\n\\end{enumerate}\n```\n\nNote that `\\part` must be present in the TeX document (at least for now) regardless of whether it actually has parts; this can be an empty `\\part{}` if parts are not intended to be used.\n\n## build_all_draft.sh and build_all_final.sh\n\nFor convenience, two bash scripts are provided to compile multiple documents.\n\nPut documents that are divided into parts into a subdirectory called `part` and documents that are divided into sections into a subdirectory called `section`. Files must use the Mediawiki syntax and must have the extension `.wik`.\n\nThe file name is taken from the file name of the .wik file, and the title of the document is taken from the first line of the .wik file.\n\n`example_document.wik` with the contents\n\n```\nDocument Title\n\n=Heading Level 1=\n\nBody.\n\n==Heading Level 2==\n\n* Unordered list item\n\n===Heading Level 3===\n\n# Ordered list item\n\n```\n\nwill produce `example_document.html`\n\n## Setting up on OS X\n\nThis works for getting the Python script running in OS X El Capitan (10.11.6). More efficient/appropriate steps may exist, but this _worked_.\n\n1. Install [TeX](http://tug.org/mactex/).\n2. Install [Python 3](https://www.python.org/downloads/).\n3. Launch Terminal.\n4. Install [Homebrew](http://brew.sh)\n5. Install [Pandoc](https://github.com/jgm/pandoc/releases/tag/1.17.2) with `brew install pandoc`.\n6. Install [Libxml2](http://xmlsoft.org/index.html) with `brew install libxml2`.\n7. Install [Libxslt](http://xmlsoft.org/libxslt/) with `brew install libxslt`.\n8. Run `link libxml2 --force`.\n9. Run `link libxslt --force`.\n10. Install [lxml](http://lxml.de) with `pip install lxml`.\n11. Install [Roman](https://pypi.python.org/pypi/roman) with `pip install Roman`.\n12. Install [cssselect](https://pypi.python.org/pypi/cssselect) with `pip install cssselect`.\n"