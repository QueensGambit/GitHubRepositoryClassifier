b"# Example Python Homework\n\n*An example homework assignment in Python for demonstrating how homework is done\nin the course.*\n\nIn this (example) assignment we will learn some basic Python. In particular, we\nwill learn about basic Python arithmetic, list handling, and how to create\nPython modules as well as an introduction to writing tests using Python's\n`unittest` module.\n\n## Objective\n\nProvide definitions to the functions `square` and `cube` defined in the Python\nsubmodules `example_homework.squaring` and `example_homework.cubing`,\nrespectively.\n\n```python\ndef square(x):\n    # return the square of x\n    \ndef cube(x):\n    # return the cube of x\n```\n\nThe provided example test suite can be executed using\n\n```\n$ python ./test_example_homework.py\n```\n\nAs always, you are welcome (and encouraged) to add your own tests to the test\nsuite to ensure that your code is robust. Most of all, make sure that the\nsupplied tests pass so that the grading software can import and use your\nfunction as expected.\n\n## Grading\n\nWhen the homework deadline is reached your implementation of `square` and `cube`\nwill be run against the following tests:\n\n* (1/5) the square and cube of zero is zero (already in the provided test suite)\n* (1/5) the square and cube of two is four and eight, respectively (already in\n  the provided test suite)\n* (1/5) `square` and `cube` should behave appropriately with complex numbers as\n  input (e.g. `1.0 - 2.0j`)\n* (2/5) these functions should also be able to act on Python `list`s of numbers\n  without the use of the Python function `map`. that is, if the input is of type\n  `list` then the output should also be of type `list` containing appropriate\n  corresponding values\n\nIt is important that the function names and locations DO NOT CHANGE. Otherwise,\nthe test suite used for grading may not be able to import your code. If it's\nimportable in the test suite provided to you it should be importable in the\ngrading test suite.\n"