b'SPtP (Smart-Point-to-Polygon) - User guide\n   by Philipp Naumann and Marcus Soll\n\n-------------------------------------------------------------------------------\n\nContents:\n\n   0. Introduction\n   1. Dependencies\n   2. Batch processing\n   3. Graphical user interface\n   4. Unit tests\n   5. Learning\n\n-------------------------------------------------------------------------------\n\n0. Introduction\n\nThe lack of certain types of geographic data prevents the development of \nlocation-aware technologies in a number of important domains. One such type of\n\xe2\x80\x9cunmapped\xe2\x80\x9d geographic data is space usage rules (SURs), which are defined as\ngeographically-bound activity restrictions (e.g. \xe2\x80\x9cno dogs\xe2\x80\x9d, \xe2\x80\x9cno smoking\xe2\x80\x9d, \xe2\x80\x9cno \nfishing\xe2\x80\x9d, \xe2\x80\x9cno skateboarding\xe2\x80\x9d). We present a novel SUR mapping technique - SPtP\n- that outperforms current state-of-the-art approaches by 30% for one of the \nmost important components of the SUR mapping pipeline: associating a point \nobservation of a SUR (e.g. a \xe2\x80\x99no smoking\xe2\x80\x99 sign) with the corresponding polygon \nin which the SUR applies (e.g. the nearby park or the entire campus on which \nthe sign is located). The accompanying  paper published at ACM CHI 2016 can be\nfound online at: http://dx.doi.org/10.1145/2858036.2858053\n\nMarcus Soll, Philipp Naumann, Johannes Sch\xc3\xb6ning, Pavel Samsonov & Brent Hecht:\nHelping Computers Understand Geographically-Bound Activity Restrictions.\nCHI 2016: Proceedings of the International Conference on Human Factors in \nComputing Systems, 2016.\n\nThe data sets used for evaluation can be found at:\nhttps://github.com/Top-Ranger/CHI2016-SUR-datasets\n\n-------------------------------------------------------------------------------\n\n1. Dependencies\n\nSPtP requires Python 3. The following libraries need to be installed:\n   pillow (https://pypi.python.org/pypi/Pillow/2.6.1)\n   shapely (https://pypi.python.org/pypi/Shapely/1.5.0)\nOn most systems these can be installed using pip, e.g.\n   pip install pillow\n   pip install shapely\n\n-------------------------------------------------------------------------------\n\n2. Batch processing\n\nThe batch processing script (run_batch.py) processes a text file containing\nlocations. A location has a name, GPS coordinates and any number of space\nusage rules. The script is started by running run_batch.py, e.g.\n\n   python3 run_batch.py\n\nBy default "./input/surs.txt" is the path to the locations file, "./input/"\nis the path to the folder containing images (and *.truth.kml files), results\nfiles are stored in "./output/" and log files are stored in "./log/".\n\nPlease use the command line option "--help" to display detailed information on\navailable command line options, e.g.\n\n   python3 run_batch.py --help\n\n-------------------------------------------------------------------------------\n\n3. Graphical user interface\n\nThe application features a web-based GUI which can be used with any modern web\nbrowser. Running run_server.py will start the GUI server with default options,\ne.g.:\n\n   python3 run_server.py\n\nBy default the server is configured to listen on localhost:8080 using the\nbatch processing script\'s default paths for images, *.truth.kml and\nresults files.\n\nMore detailed information on available command line options may be displayed\nby using the command line option "--help", e.g.\n\n   python3 run_server.py --help\n\nThe server itself is a basic HTTP server. The web interface has three basic\nfunctions:\n1) Display a location previously processed by the batch processing script.\n2) Manually enter a location to be processed. Uploading an image is optional\n   and only possible if the browser supports the FileReader API.\n3) Select layers (map tiles, buildings, polygons)\n\nThe information box in the upper right corner may be expanded by left-clicking\nit.\n\n-------------------------------------------------------------------------------\n\n4. Unit tests\n\nThe application\'s unit tests may be performed by running run_test.py, e.g.\n\n   python3 run_tests.py\n\n-------------------------------------------------------------------------------\n\n5. Learning\n\nThe learning process allows the generation of factors which determine the \nweight of each weak classifier. A default factors file is included in this \ndistribution (/data/factors.txt). The learning process uses input data at \n"./learning/db/" for the learning process and input data at \n"./learning/test/" for verification.\n\nThe learning process can be started by running run_learning.py, e.g.:\n\n   python3 run_learning.py\n\nThe parameter of the learning process can be controlled through command line \narguments. For more information run\n\n   python3 run_learning.py --help\n'